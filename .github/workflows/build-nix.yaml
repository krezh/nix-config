---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build Nix
on:
  pull_request:
    branches: ["main"]
    paths:
      - "**.nix"
      - "flake.lock"
  workflow_dispatch:
    inputs:
      skip-cache:
        description: "Skip restoring Nix cache"
        type: boolean
        default: false
        required: false
  workflow_call:
  push:
    branches: ["main"]
    paths:
      - "**.nix"
      - "flake.lock"

permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true
env:
  CACHE_NAME: krezh
  NIX_CONFIG: |
    accept-flake-config = true
    always-allow-substitutes = true
    builders-use-substitutes = true
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      build-type: ${{ steps.detect.outputs.build-type }}
      changed-packages: ${{ steps.detect.outputs.changed-packages }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Get changed pkgs files
        id: pkg-files
        uses: bjw-s-labs/action-changed-files@1a5aeab1bfa64d0c4e786f501d5a3f1fad4a24da # v0.4.1
        with:
          patterns: pkgs/**/*

      - name: Detect what changed
        id: detect
        run: |
          PKGS='${{ steps.pkg-files.outputs.changed_files }}'

          # Manual trigger or no pkg changes = full build
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ -z "$PKGS" ] || [ "$PKGS" = "[]" ]; then
            echo "build-type=full" >> $GITHUB_OUTPUT
            echo "ðŸ”„ Full build"
            exit 0
          fi

          # Only pkgs/ changes = selective package build
          PACKAGES=$(echo "$PKGS" | jq -r '.[]' | sed -n 's|^pkgs/[^/]*/\([^/]*\).*|\1|p' | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "build-type=packages" >> $GITHUB_OUTPUT
          echo "changed-packages=$PACKAGES" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Package build: $PACKAGES"

      - name: Show Summary
        uses: ./.github/actions/workflow-summary
        with:
          type: detect-changes
          build-type: ${{ steps.detect.outputs.build-type }}
          changed-files: ${{ steps.pkg-files.outputs.changed_files }}
          changed-packages: ${{ steps.detect.outputs.changed-packages }}

  ghMatrix:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.build-type == 'full'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
        with:
          nix_conf: ${{ env.NIX_CONFIG }}

      - name: Setup Nix Cache
        uses: nix-community/cache-nix-action@135667ec418502fa5a3598af6fb9eb733888ce6a # v6.1.3
        id: cache
        with:
          primary-key: nix-flake-inputs-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-flake-inputs-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-flake-inputs-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never

      - run: nix build .#gc-keep
        if: steps.cache.outputs.hit-primary-key != 'true'

      - id: set-matrix
        name: Generate Matrix
        run: |
          set -Eeu
          matrix=$(nix eval --json '.#ghMatrix')
          if [ "$(echo "$matrix" | jq '.include | length')" -eq 0 ]; then
            echo "Error: No hosts to build"
            exit 1
          fi
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

      - name: Show Summary
        uses: ./.github/actions/workflow-summary
        with:
          type: matrix
          matrix: ${{ steps.set-matrix.outputs.matrix }}
          cache-hit: ${{ steps.cache.outputs.hit-primary-key }}
          cache-name: ${{ env.CACHE_NAME }}
          flake-lock-hash: ${{ hashFiles('**/*.nix', '**/flake.lock') }}

  build-packages:
    name: Build package ${{ matrix.package }}
    needs: detect-changes
    if: needs.detect-changes.outputs.build-type == 'packages'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Nix with caching
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-cache: ${{ secrets.ATTIC_CACHE }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
          skip-cache: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}

      - name: Build package
        id: build
        run: |
          set -o pipefail
          nix build ".#${{ matrix.package }}" --print-build-logs 2>&1 | tee build.log || {
            {
              echo 'error-log<<EOF_ERROR_LOG'
              grep -iE 'error|failed|cannot|fatal|panic' build.log | tail -n 100 || tail -n 50 build.log
              echo 'EOF_ERROR_LOG'
            } >> $GITHUB_OUTPUT
            exit 1
          }

      - name: Post build errors
        if: failure() && github.event_name == 'pull_request'
        uses: ./.github/actions/post-build-error
        with:
          build-type: package
          build-name: ${{ matrix.package }}
          flake-target: .#${{ matrix.package }}
          error-log: ${{ steps.build.outputs.error-log }}
          pr-number: ${{ github.event.pull_request.number }}

      - name: Success Summary
        if: success()
        uses: ./.github/actions/workflow-summary
        with:
          type: package-success
          package: ${{ matrix.package }}
          flake-target: .#${{ matrix.package }}

      - name: Failure Summary
        if: failure()
        uses: ./.github/actions/workflow-summary
        with:
          type: package-failure
          package: ${{ matrix.package }}
          flake-target: .#${{ matrix.package }}

  nix-build:
    name: Build ${{ matrix.host }}
    if: github.event.pull_request.draft == false
    needs: [detect-changes, ghMatrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.ghMatrix.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Nothing but Nix
        uses: wimpysworld/nothing-but-nix@6af122a9403f936ef689e44cc013ae3f3e2f1c3b # v6
        with:
          hatchet-protocol: cleave
          nix-permission-edict: true

      - name: Setup Nix with caching
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-cache: ${{ secrets.ATTIC_CACHE }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
          skip-cache: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}

      - name: Restore Nix Cache
        if: github.event_name != 'workflow_dispatch' || !inputs.skip-cache
        uses: nix-community/cache-nix-action/restore@135667ec418502fa5a3598af6fb9eb733888ce6a # v6.1.3
        with:
          primary-key: nix-flake-inputs-${{ hashFiles('**/*.nix', '**/flake.lock') }}

      - name: Find previous run ID
        id: find-run
        run: |
          run_id=$(gh run list --workflow build-nix.yaml --branch main --status success --limit 1 --json databaseId -q '.[0].databaseId')
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Download previous package list artifact (if any)
      - name: Download previous package list artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        id: download-artifact
        continue-on-error: true
        with:
          name: pkg-list-${{ matrix.host }}
          path: previous-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.find-run.outputs.run_id }}
          merge-multiple: false

      - name: Build System
        id: build
        run: |
          set -o pipefail
          build_start=$(date +%s)
          echo "build_start=$build_start" >> $GITHUB_OUTPUT

          nix build \
            ".#top.${{ matrix.host }}" \
            -o result \
            --fallback \
            --no-write-lock-file \
            --log-format raw 2>&1 | tee build.log || {
            {
              echo 'error-log<<EOF_ERROR_LOG'
              grep -iE 'error|failed|cannot|fatal|panic' build.log | tail -n 100 || tail -n 50 build.log
              echo 'EOF_ERROR_LOG'
            } >> $GITHUB_OUTPUT

            build_end=$(date +%s)
            build_duration=$((build_end - build_start))
            echo "build_duration=$build_duration" >> $GITHUB_OUTPUT

            exit 1
          }

          build_end=$(date +%s)
          build_duration=$((build_end - build_start))
          echo "build_duration=$build_duration" >> $GITHUB_OUTPUT

      - name: Generate new package list
        if: success()
        run: python3 .github/scripts/pkg-tool.py list result pkg-list.json

      - name: Upload new package list artifact
        if: success()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: pkg-list-${{ matrix.host }}
          path: pkg-list.json
          if-no-files-found: error
          retention-days: 30
          compression-level: 6
          overwrite: true
          include-hidden-files: false

      - name: Calculate build size
        id: build-info
        if: success()
        run: |
          build_size="Unknown"
          result_path=""
          if [ -L "result" ]; then
            result_path=$(readlink "result" 2>/dev/null || echo "")
            if [ -n "$result_path" ]; then
              size_output="$(nix path-info --closure-size --human-readable "$result_path" 2>/dev/null || echo "")"
              if [ -n "$size_output" ]; then
                build_size="$(echo "$size_output" | awk '{ if (NF == 2) { print $2 } else if (NF >= 3) { print $(NF-1) $NF } }')"
              fi
            fi
          fi
          echo "build-size=$build_size" >> $GITHUB_OUTPUT
          echo "result-path=$result_path" >> $GITHUB_OUTPUT

      - name: Success Summary
        if: success()
        uses: ./.github/actions/workflow-summary
        with:
          type: build-success
          host: ${{ matrix.host }}
          runner: ${{ matrix.runner }}
          build-size: ${{ steps.build-info.outputs.build-size }}
          build-duration: ${{ steps.build.outputs.build_duration }}
          result-path: ${{ steps.build-info.outputs.result-path }}
          flake-target: .#top.${{ matrix.host }}

      - name: Package Diff
        if: success()
        run: |
          prev_json="${{ steps.download-artifact.outputs.download-path }}/pkg-list.json"
          {
            echo "### ðŸ“¦ Package Diff"
            if [ -f "$prev_json" ]; then
              python3 .github/scripts/pkg-tool.py diff "$prev_json" pkg-list.json --github
            else
              echo "_No previous package list found; skipping diff._"
            fi
          } >> "${GITHUB_STEP_SUMMARY}"

      - name: Post build errors
        if: failure() && github.event_name == 'pull_request'
        uses: ./.github/actions/post-build-error
        with:
          build-type: system
          build-name: ${{ matrix.host }}
          flake-target: .#top.${{ matrix.host }}
          error-log: ${{ steps.build.outputs.error-log }}
          build-duration: ${{ steps.build.outputs.build_duration }}
          runner: ${{ matrix.runner }}
          pr-number: ${{ github.event.pull_request.number }}

      - name: Failure Summary
        if: failure()
        uses: ./.github/actions/workflow-summary
        with:
          type: build-failure
          host: ${{ matrix.host }}
          runner: ${{ matrix.runner }}
          build-duration: ${{ steps.build.outputs.build_duration }}
          flake-target: .#top.${{ matrix.host }}
          fork-pr: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}
