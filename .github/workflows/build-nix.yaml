---
name: Build Nix
on:
  pull_request:
    paths-ignore: ["pkgs/**", ".github/**"]
  workflow_dispatch:
  workflow_call:
  push:
    branches: ["main"]
    paths:
      - "**.nix"
      - "flake.lock"
      - "modules/**"
      - "hosts/**"
permissions:
  id-token: "write"
  contents: "read"
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true
env:
  CACHE_NAME: krezh
  NIX_CONFIG: |
    accept-flake-config = true
    always-allow-substitutes = true
    builders-use-substitutes = true
  FORMAT_DURATION: |
    format_duration() {
      local duration_seconds=$1
      if [ $duration_seconds -ge 3600 ]; then
        hours=$((duration_seconds / 3600))
        minutes=$(((duration_seconds % 3600) / 60))
        seconds=$((duration_seconds % 60))
        echo "${hours}h${minutes}m${seconds}s"
      elif [ $duration_seconds -ge 60 ]; then
        minutes=$((duration_seconds / 60))
        seconds=$((duration_seconds % 60))
        echo "${minutes}m${seconds}s"
      else
        echo "${duration_seconds}s"
      fi
    }
jobs:
  ghMatrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
        with:
          nix_conf: ${{ env.NIX_CONFIG }}

      - uses: nix-community/cache-nix-action@135667ec418502fa5a3598af6fb9eb733888ce6a # v6.1.3
        id: cache
        with:
          primary-key: nix-flake-inputs-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-flake-inputs-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-flake-inputs-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never

      - run: nix build .#gc-keep
        if: steps.cache.outputs.hit-primary-key != 'true'

      - id: set-matrix
        name: Generate Matrix
        run: |
          set -Eeu
          matrix=$(nix eval --json '.#ghMatrix')
          # Validate matrix isn't empty
          if [ "$(echo "$matrix" | jq '.include | length')" -eq 0 ]; then
            echo "Error: No hosts to build"
            exit 1
          fi
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

      - name: Show Summary
        run: |
          matrix='${{ steps.set-matrix.outputs.matrix }}'
          {
            echo "## üîç Build Matrix Generated"
            echo ""
            echo "**Event:** ${{ github.event_name }}"
            echo "**Branch/Ref:** ${{ github.ref }}"
            echo "**Commit:** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
            echo ""
            echo "**Total hosts to build:** $(echo "$matrix" | jq '.include | length')"
            echo ""
            echo "### üèóÔ∏è Hosts to Build:"
            echo "$matrix" | jq -r '.include[] | "- **`" + .host + "`** (runner: `" + .runner + "`)"'
            echo ""
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "**PR:** [#${{ github.event.number }}](${{ github.event.pull_request.html_url }}) - ${{ github.event.pull_request.title }}"
              echo "**Author:** @${{ github.event.pull_request.user.login }}"
              echo ""
            fi
            echo "### ‚öôÔ∏è Configuration"
            echo "- **Cache:** ${{ env.CACHE_NAME }}"
            cache_hit="${{ steps.cache.outputs.hit-primary-key }}"
            if [ "$cache_hit" = "true" ]; then
              echo "- **Cache Hit:** ‚úÖ Yes"
            else
              echo "- **Cache Hit:** ‚ùå No (rebuilding inputs)"
            fi
            echo "- **Flake Lock Hash:** \`${{ hashFiles('**/*.nix', '**/flake.lock') }}\`"
            echo ""
            echo "<details>"
            echo "<summary>View raw matrix JSON</summary>"
            echo ""
            echo '```json'
            echo '${{ toJson(steps.set-matrix.outputs.matrix) }}'
            echo '```'
            echo "</details>"
          } >> "${GITHUB_STEP_SUMMARY}"

  nix-build:
    name: Build ${{ matrix.host }}
    if: github.event.pull_request.draft == false
    needs: ghMatrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.ghMatrix.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Environment
        uses: wimpysworld/nothing-but-nix@6af122a9403f936ef689e44cc013ae3f3e2f1c3b # v6
        with:
          hatchet-protocol: cleave
          nix-permission-edict: true

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
        with:
          nix_conf: ${{ env.NIX_CONFIG }}

      - uses: nix-community/cache-nix-action/restore@135667ec418502fa5a3598af6fb9eb733888ce6a # v6.1.3
        with:
          primary-key: nix-flake-inputs-${{ hashFiles('**/*.nix', '**/flake.lock') }}

      - name: Setup Cachix
        uses: cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad # v16
        if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork }}
        with:
          name: ${{ env.CACHE_NAME }}
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Setup Attic
        uses: ryanccn/attic-action@7fbafba3978e86e585cb68a82c08b30f3672b62d # v0.4.0
        if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork }}
        with:
          endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          cache: ${{ secrets.ATTIC_CACHE }}
          token: ${{ secrets.ATTIC_TOKEN }}

      - name: Build System
        id: build
        run: |
          set -o pipefail
          build_start=$(date +%s)
          echo "build_start=$build_start" >> $GITHUB_OUTPUT

          nix build \
            ".#top.${{ matrix.host }}" \
            -o result \
            --fallback \
            --no-write-lock-file \
            --log-format raw

          build_end=$(date +%s)
          build_duration=$((build_end - build_start))
          echo "build_duration=$build_duration" >> $GITHUB_OUTPUT

      - name: Success Summary
        if: success()
        run: |
          # Load duration formatting function
          eval "$FORMAT_DURATION"

          # Get build size and timing info
          build_size="Unknown"
          if [ -L "result" ]; then
            store_path=$(readlink "result" 2>/dev/null || echo "")
            if [ -n "$store_path" ]; then
              # Get total closure size with human readable format
              size_output="$(nix path-info --closure-size --human-readable "$store_path" 2>/dev/null || echo "")"
              if [ -n "$size_output" ]; then
                # Extract size and unit - handle both "20.9G" and "20.9 GiB" formats
                build_size="$(echo "$size_output" | awk '{
                  if (NF == 2) {
                    print $2
                  } else if (NF >= 3) {
                    print $(NF-1) $NF
                  }
                }')"
              fi
            fi
          fi

          {
            echo "## ‚úÖ Build Successful: \`${{ matrix.host }}\`"
            echo ""
            echo "| Property | Value |"
            echo "|----------|--------|"
            echo "| **Runner** | \`${{ matrix.runner }}\` |"
            echo "| **Build Size** | \`${build_size}\` |"
            echo "| **Result Path** | \`$(readlink result 2>/dev/null || echo "Unknown")\` |"
            echo ""
            echo "### üéØ Build Details"
            echo "- **Event:** ${{ github.event_name }}"
            echo "- **Ref:** ${{ github.ref }}"
            echo "- **Flake Target:** \`.#top.${{ matrix.host }}\`"
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "- **PR:** [#${{ github.event.number }}](${{ github.event.pull_request.html_url }}) - ${{ github.event.pull_request.title }}"
              echo "- **Author:** @${{ github.event.pull_request.user.login }}"
              if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
                echo "- **Draft:** Yes"
              else
                echo "- **Draft:** No"
              fi
            fi
            echo ""
            echo "**Build Duration:** $(format_duration ${{ steps.build.outputs.build_duration }})"
          } >> "${GITHUB_STEP_SUMMARY}"

      - name: Failure Summary
        if: failure()
        run: |
          # Load duration formatting function
          eval "$FORMAT_DURATION"

          {
            echo "## ‚ùå Build Failed: \`${{ matrix.host }}\`"
            echo ""
            echo "| Property | Value |"
            echo "|----------|--------|"
            echo "| **Runner** | \`${{ matrix.runner }}\` |"
            echo ""
            echo "### üîç Failure Details"
            echo "- **Event:** ${{ github.event_name }}"
            echo "- **Ref:** ${{ github.ref }}"
            echo "- **Flake Target:** \`.#top.${{ matrix.host }}\`"
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "- **PR:** [#${{ github.event.number }}](${{ github.event.pull_request.html_url }}) - ${{ github.event.pull_request.title }}"
              echo "- **Author:** @${{ github.event.pull_request.user.login }}"
            fi
            echo ""
            echo "### üõ†Ô∏è Debugging Information"
            if [ "${{ github.event_name }}" != "pull_request" ] || [ "${{ github.event.pull_request.head.repo.fork }}" != "true" ]; then
              echo "- **Cache Available:** ‚úÖ Yes"
            else
              echo "- **Cache Available:** ‚ùå No (fork/external PR)"
            fi
            echo "- **Build Command:** \`nix build .#top.${{ matrix.host }} -o result --fallback --no-write-lock-file\`"
            echo "- **Job Status:** Failed"
            if [ -n "${{ steps.build.outputs.build_duration }}" ]; then
              echo "- **Time to Failure:** $(format_duration ${{ steps.build.outputs.build_duration }})"
            fi
            echo ""
            echo "### üí° Next Steps"
            echo "1. Check the build logs above for specific error messages"
            echo "2. Verify the flake configuration for \`${{ matrix.host }}\`"
            echo "3. Test locally with: \`nix build .#top.${{ matrix.host }}\`"
            echo "4. Check if recent changes broke the build"
          } >> "${GITHUB_STEP_SUMMARY}"
