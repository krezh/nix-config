---
name: Build and diff Nix systems

on:
  pull_request:
    paths-ignore: ["pkgs/**"]
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - main
    paths:
      - "**.nix"
      - "flake.lock"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  ATTIC_ENDPOINT: "https://nix-cache.plexuz.xyz"
  ATTIC_CACHE: "krezh"
  EXCLUDED_HOSTS: '["nixos-livecd"]'

jobs:
  nix-matrix:
    runs-on: ubuntu-latest
    #needs: check-cache
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27

      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -Eeu
          matrix="$(nix eval --accept-flake-config --json '.#evalHosts' | jq -cM --argjson exclude_hosts '${{ env.EXCLUDED_HOSTS }}' 'del(.include[] | select(.host as $host | $exclude_hosts | index($host)))')"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

      - name: show output
        run: |
          echo "${{ toJson(steps.set-matrix.outputs.matrix) }}" >> "${GITHUB_STEP_SUMMARY}"

  nix-build:
    if: github.event.pull_request.draft == false
    needs: nix-matrix
    permissions:
      pull-requests: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.nix-matrix.outputs.matrix) }}

    runs-on: nix-config-runner
    steps:
      # - name: maximize build space
      #   uses: easimon/maximize-build-space@v10
      #   with:
      #     root-reserve-mb: 16384
      #     swap-size-mb: 4096
      #     remove-dotnet: true
      #     remove-android: true
      #     remove-haskell: true
      #     remove-docker-images: true
      #     remove-codeql: true
      #     build-mount-path: "/nix"

      - name: Change /nix owner
        run: |
          ls -la /nix
          sudo chown -R root:runner /nix
          ls -la /nix

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Lix
        run: curl -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm --extra-conf="trusted-users = root runner"

      # - name: Install Nix
      #   uses: DeterminateSystems/nix-installer-action@v13

      # - name: Set up Magic Nix Cache
      #   uses: DeterminateSystems/magic-nix-cache-action@v7

      # - name: Set up Attic
      #   uses: ryanccn/attic-action@v0.2.1
      #   if: ${{ !github.event.pull_request.head.repo.fork }}
      #   with:
      #     endpoint: "${{ env.ATTIC_ENDPOINT }}"
      #     cache: "${{ env.ATTIC_CACHE }}"
      #     token: "${{ secrets.ATTIC_TOKEN }}"

      - name: Set up Cachix
        uses: cachix/cachix-action@v15
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          name: krezh
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Garbage collect build dependencies
        run: nix-collect-garbage

      # - name: Build previous ${{ matrix.host }} system
      #   run: |
      #     nix build \
      #       "github:krezh/nix-config#top.${{ matrix.host }}" \
      #       --log-format raw \
      #       --profile ./profile \
      #       --accept-flake-config

      # - name: Build new ${{ matrix.host }} system
      #   run: |
      #     set -o pipefail
      #     nix build \
      #       ".#top.${{ matrix.host }}" \
      #       --profile ./profile \
      #       --accept-flake-config \
      #       --fallback \
      #       --log-format raw \
      #        > >(tee stdout.log) 2> >(tee /tmp/nix-build-err.log >&2)

      - name: Build previous ${{ matrix.host }} system
        run: |
          nix build \
            "github:krezh/nix-config#top.${{ matrix.host }}" \
            --log-format raw \
            --accept-flake-config
          mv result result-previous

      - name: Build new ${{ matrix.host }} system
        run: |
          set -o pipefail
          nix build \
            ".#top.${{ matrix.host }}" \
            --accept-flake-config \
            --fallback \
            --log-format raw \
             > >(tee stdout.log) 2> >(tee /tmp/nix-build-err.log >&2)
          mv result result-new

      - name: Output build failure
        if: failure()
        run: |
          drv=$(grep "For full logs, run" /tmp/nix-build-err.log | grep -oE "/nix/store/.*.drv")
          if [ -n "$drv" ]; then
            nix log "$drv"
            echo "$drv"
          fi
          exit 1

      # - name: Diff profile
      #   id: diff
      #   run: |
      #     nix profile diff-closures --profile ./profile
      #     delimiter="$(openssl rand -hex 16)"
      #     echo "diff<<${delimiter}" >> "${GITHUB_OUTPUT}"
      #     nix profile diff-closures --profile ./profile | perl -pe 's/\e\[[0-9;]*m(?:\e\[K)?//g' >> "${GITHUB_OUTPUT}"
      #     echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Diff profile
        id: diff
        run: |
          delimiter="$(openssl rand -hex 16)"
          echo "diff<<${delimiter}" >> "${GITHUB_OUTPUT}"
          nix store diff-closures ./result-previous ./result-new >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Comment report in pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: ".#top.${{ matrix.host }}"
          message: |
            ### Report for `${{ matrix.host }}`

            #### Version changes:
            ```yaml
            ${{ steps.diff.outputs.diff }}
            ```

  nix-build-success:
    if: ${{ always() }}
    needs:
      - nix-build
    name: Nix Build Successful
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        name: Check matrix status
        run: exit 1
