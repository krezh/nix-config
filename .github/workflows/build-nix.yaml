---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build Nix
on:
  pull_request:
    branches: ["main"]
    paths:
      - "**.nix"
      - "flake.lock"
  workflow_dispatch:
    inputs:
      skip-cache:
        description: "Skip restoring Nix cache"
        type: boolean
        default: false
        required: false
  workflow_call:
  push:
    branches: ["main"]
    paths:
      - "**.nix"
      - "flake.lock"

permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true
env:
  CACHE_NAME: krezh
  NIX_CONFIG: |
    accept-flake-config = true
    always-allow-substitutes = true
    builders-use-substitutes = true
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-packages: ${{ steps.detect.outputs.changed-packages }}
      changed-systems: ${{ steps.detect.outputs.changed-systems }}
      build-packages: ${{ steps.detect.outputs.build-packages }}
      build-systems: ${{ steps.detect.outputs.build-systems }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: bjw-s-labs/action-changed-files@1a5aeab1bfa64d0c4e786f501d5a3f1fad4a24da # v0.4.1
        with:
          patterns: |
            pkgs/**/*
            hosts/**/*
            modules/**/*
            home/**/*
            flake.nix
            flake.lock
            **.nix

      - name: Check for manual trigger
        id: manual-trigger
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "is-manual=true" >> $GITHUB_OUTPUT
            echo "🔄 Manual trigger detected - will build everything"
          else
            echo "is-manual=false" >> $GITHUB_OUTPUT
          fi

      - name: Parse changed packages
        id: packages
        if: steps.manual-trigger.outputs.is-manual == 'false'
        run: |
          CHANGED_FILES='${{ steps.changed-files.outputs.changed_files }}'
          PACKAGES=$(echo "$CHANGED_FILES" | jq -c '[.[] | select(startswith("pkgs/")) | split("/")[2]] | unique')

          echo "list=$PACKAGES" >> $GITHUB_OUTPUT

          if [ "$PACKAGES" != "[]" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "📦 Package changes detected: $PACKAGES"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Detect system-related changes
        id: system-files
        if: steps.manual-trigger.outputs.is-manual == 'false'
        run: |
          CHANGED_FILES='${{ steps.changed-files.outputs.changed_files }}'

          # Check for flake.lock (pure jq)
          FLAKE_LOCK_CHANGED=$(echo "$CHANGED_FILES" | jq -r 'any(. == "flake.lock")')
          echo "flake-lock-changed=$FLAKE_LOCK_CHANGED" >> $GITHUB_OUTPUT

          # Check for any system changes (hosts/, modules/, home/, or top-level .nix files)
          HAS_SYSTEM_CHANGES=$(echo "$CHANGED_FILES" | jq -r 'any(test("^(hosts/|modules/|home/|[^/]*\\.nix$)"))')
          echo "has-changes=$HAS_SYSTEM_CHANGES" >> $GITHUB_OUTPUT

      - name: Determine affected systems
        id: systems
        if: |
          steps.manual-trigger.outputs.is-manual == 'false' &&
          (steps.system-files.outputs.has-changes == 'true' || steps.system-files.outputs.flake-lock-changed == 'true')
        run: |
          CHANGED_FILES='${{ steps.changed-files.outputs.changed_files }}'

          # Extract host-specific changes (pure jq)
          AFFECTED_SYSTEMS=$(echo "$CHANGED_FILES" | jq -c '[.[] | select(startswith("hosts/")) | split("/")[1]] | unique')

          # Check for changes that affect all systems (modules/, home/, top-level .nix)
          HAS_NON_HOST_CHANGES=$(echo "$CHANGED_FILES" | jq -r 'any(test("^(modules/|home/|[^/]*\\.nix$)"))')

          # Determine if we should build all systems or just specific ones
          if [ "$HAS_NON_HOST_CHANGES" = "true" ] || [ "${{ steps.system-files.outputs.flake-lock-changed }}" = "true" ] || [ "$AFFECTED_SYSTEMS" = "[]" ]; then
            echo "list=[]" >> $GITHUB_OUTPUT
            echo "build-all=true" >> $GITHUB_OUTPUT

            if [ "${{ steps.system-files.outputs.flake-lock-changed }}" = "true" ]; then
              echo "🖥️ System changes detected (all systems - flake.lock updated)"
            else
              echo "🖥️ System changes detected (all systems)"
            fi
          else
            echo "list=$AFFECTED_SYSTEMS" >> $GITHUB_OUTPUT
            echo "build-all=false" >> $GITHUB_OUTPUT
            echo "🖥️ System changes detected: $AFFECTED_SYSTEMS"
          fi

      - name: Set final outputs
        id: detect
        run: |
          # Handle manual trigger
          if [ "${{ steps.manual-trigger.outputs.is-manual }}" = "true" ]; then
            echo "build-packages=true" >> $GITHUB_OUTPUT
            echo "build-systems=true" >> $GITHUB_OUTPUT
            echo "changed-packages=[]" >> $GITHUB_OUTPUT
            echo "changed-systems=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Set package outputs
          if [ "${{ steps.packages.outputs.has-changes }}" = "true" ]; then
            echo "build-packages=true" >> $GITHUB_OUTPUT
            echo 'changed-packages=${{ steps.packages.outputs.list }}' >> $GITHUB_OUTPUT
          else
            echo "build-packages=false" >> $GITHUB_OUTPUT
            echo "changed-packages=[]" >> $GITHUB_OUTPUT
          fi

          # Set system outputs
          if [ "${{ steps.system-files.outputs.has-changes }}" = "true" ] || [ "${{ steps.system-files.outputs.flake-lock-changed }}" = "true" ]; then
            echo "build-systems=true" >> $GITHUB_OUTPUT
            echo 'changed-systems=${{ steps.systems.outputs.list }}' >> $GITHUB_OUTPUT
          else
            echo "build-systems=false" >> $GITHUB_OUTPUT
            echo "changed-systems=[]" >> $GITHUB_OUTPUT
          fi

      - name: Determine build type for summary
        id: build-type
        run: |
          if [ "${{ steps.detect.outputs.build-packages }}" = "true" ] && [ "${{ steps.detect.outputs.build-systems }}" = "true" ]; then
            echo "type=full" >> $GITHUB_OUTPUT
          elif [ "${{ steps.detect.outputs.build-packages }}" = "true" ]; then
            echo "type=packages" >> $GITHUB_OUTPUT
          elif [ "${{ steps.detect.outputs.build-systems }}" = "true" ]; then
            echo "type=full" >> $GITHUB_OUTPUT
          else
            echo "type=skip" >> $GITHUB_OUTPUT
          fi

      - name: Show Summary
        uses: ./.github/actions/workflow-summary
        with:
          type: detect-changes
          build-type: ${{ steps.build-type.outputs.type }}
          changed-files: ${{ steps.changed-files.outputs.changed_files }}
          changed-packages: ${{ steps.detect.outputs.changed-packages }}

  ghMatrix:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.build-systems == 'true'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
        with:
          nix_conf: ${{ env.NIX_CONFIG }}

      - id: set-matrix
        name: Generate Matrix
        run: |
          set -Eeu
          matrix=$(nix eval --json '.#ghMatrix')
          changed_systems='${{ needs.detect-changes.outputs.changed-systems }}'

          # Filter matrix if specific systems changed
          if [ -n "$changed_systems" ] && [ "$changed_systems" != "[]" ]; then
            echo "🎯 Filtering matrix for systems: $changed_systems"

            # Remove any surrounding quotes that GitHub Actions might add
            changed_systems="${changed_systems#\"}"
            changed_systems="${changed_systems%\"}"

            # Validate JSON before passing to jq
            if echo "$changed_systems" | jq empty 2>/dev/null; then
              filtered_matrix=$(echo "$matrix" | jq --argjson systems "$changed_systems" '{include: [.include[] | select(.host as $h | $systems | index($h))]}')

              # Verify the filter produced results
              filtered_count=$(echo "$filtered_matrix" | jq '.include | length')
              if [ "$filtered_count" -gt 0 ]; then
                matrix="$filtered_matrix"
                echo "   ✅ Filtered to $filtered_count system(s)"
              else
                echo "   ⚠️  Filter produced no results, building all systems"
              fi
            else
              echo "   ⚠️  Warning: changed-systems is not valid JSON, building all systems"
              echo "   Raw value: '$changed_systems'"
            fi
          else
            echo "🏗️  Building all systems (no filter)"
          fi

          if [ "$(echo "$matrix" | jq '.include | length')" -eq 0 ]; then
            echo "❌ Error: No hosts to build"
            exit 1
          fi

          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

      - name: Show Summary
        uses: ./.github/actions/workflow-summary
        with:
          type: matrix
          matrix: ${{ steps.set-matrix.outputs.matrix }}
          cache-name: ${{ env.CACHE_NAME }}
          flake-lock-hash: ${{ hashFiles('**/*.nix', '**/flake.lock') }}

  build-packages:
    name: Build package ${{ matrix.package }}
    needs: detect-changes
    if: needs.detect-changes.outputs.build-packages == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Nix with caching
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-cache: ${{ secrets.ATTIC_CACHE }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
          skip-cache: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}

      - name: Build package
        id: build
        run: |
          set -o pipefail
          nix build ".#${{ matrix.package }}" --print-build-logs 2>&1 | tee build.log || {
            {
              echo 'error-log<<EOF_ERROR_LOG'
              grep -iE 'error|failed|cannot|fatal|panic' build.log | tail -n 100 || tail -n 50 build.log
              echo 'EOF_ERROR_LOG'
            } >> $GITHUB_OUTPUT
            exit 1
          }

      - name: Post build errors
        if: failure() && github.event_name == 'pull_request'
        uses: ./.github/actions/post-build-error
        with:
          build-type: package
          build-name: ${{ matrix.package }}
          flake-target: .#${{ matrix.package }}
          error-log: ${{ steps.build.outputs.error-log }}
          pr-number: ${{ github.event.pull_request.number }}

      - name: Success Summary
        if: success()
        uses: ./.github/actions/workflow-summary
        with:
          type: package-success
          package: ${{ matrix.package }}
          flake-target: .#${{ matrix.package }}

      - name: Failure Summary
        if: failure()
        uses: ./.github/actions/workflow-summary
        with:
          type: package-failure
          package: ${{ matrix.package }}
          flake-target: .#${{ matrix.package }}

  nix-build:
    name: Build ${{ matrix.host }}
    if: |
      github.event.pull_request.draft == false &&
      needs.detect-changes.outputs.build-systems == 'true'
    needs: [detect-changes, ghMatrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.ghMatrix.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Nothing but Nix
        uses: wimpysworld/nothing-but-nix@6af122a9403f936ef689e44cc013ae3f3e2f1c3b # v6
        with:
          hatchet-protocol: cleave
          nix-permission-edict: true

      - name: Setup Nix with caching
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-cache: ${{ secrets.ATTIC_CACHE }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
          skip-cache: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}

      - name: Find previous run ID
        id: find-run
        run: |
          run_id=$(gh run list --workflow build-nix.yaml --branch main --status success --limit 1 --json databaseId -q '.[0].databaseId')
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Download previous package list artifact (if any)
      - name: Download previous package list artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        id: download-artifact
        continue-on-error: true
        with:
          name: pkg-list-${{ matrix.host }}
          path: previous-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.find-run.outputs.run_id }}
          merge-multiple: false

      - name: Build System
        id: build
        run: |
          set -o pipefail
          build_start=$(date +%s)
          echo "build_start=$build_start" >> $GITHUB_OUTPUT

          nix build \
            ".#top.${{ matrix.host }}" \
            -o result \
            --fallback \
            --no-write-lock-file \
            --log-format raw 2>&1 | tee build.log || {
            {
              echo 'error-log<<EOF_ERROR_LOG'
              grep -iE 'error|failed|cannot|fatal|panic' build.log | tail -n 100 || tail -n 50 build.log
              echo 'EOF_ERROR_LOG'
            } >> $GITHUB_OUTPUT

            build_end=$(date +%s)
            build_duration=$((build_end - build_start))
            echo "build_duration=$build_duration" >> $GITHUB_OUTPUT

            exit 1
          }

          build_end=$(date +%s)
          build_duration=$((build_end - build_start))
          echo "build_duration=$build_duration" >> $GITHUB_OUTPUT

      - name: Generate new package list
        if: success()
        run: python3 .github/scripts/pkg-tool.py list result pkg-list.json

      - name: Upload new package list artifact
        if: success()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: pkg-list-${{ matrix.host }}
          path: pkg-list.json
          if-no-files-found: error
          retention-days: 30
          compression-level: 6
          overwrite: true
          include-hidden-files: false

      - name: Calculate build size
        id: build-info
        if: success()
        run: |
          build_size="Unknown"
          result_path=""
          if [ -L "result" ]; then
            result_path=$(readlink "result" 2>/dev/null || echo "")
            if [ -n "$result_path" ]; then
              size_output="$(nix path-info --closure-size --human-readable "$result_path" 2>/dev/null || echo "")"
              if [ -n "$size_output" ]; then
                build_size="$(echo "$size_output" | awk '{ if (NF == 2) { print $2 } else if (NF >= 3) { print $(NF-1) $NF } }')"
              fi
            fi
          fi
          echo "build-size=$build_size" >> $GITHUB_OUTPUT
          echo "result-path=$result_path" >> $GITHUB_OUTPUT

      - name: Success Summary
        if: success()
        uses: ./.github/actions/workflow-summary
        with:
          type: build-success
          host: ${{ matrix.host }}
          runner: ${{ matrix.runner }}
          build-size: ${{ steps.build-info.outputs.build-size }}
          build-duration: ${{ steps.build.outputs.build_duration }}
          result-path: ${{ steps.build-info.outputs.result-path }}
          flake-target: .#top.${{ matrix.host }}

      - name: Package Diff
        if: success()
        run: |
          prev_json="${{ steps.download-artifact.outputs.download-path }}/pkg-list.json"
          {
            echo "### 📦 Package Diff"
            if [ -f "$prev_json" ]; then
              python3 .github/scripts/pkg-tool.py diff "$prev_json" pkg-list.json --github
            else
              echo "_No previous package list found; skipping diff._"
            fi
          } >> "${GITHUB_STEP_SUMMARY}"

      - name: Post build errors
        if: failure() && github.event_name == 'pull_request'
        uses: ./.github/actions/post-build-error
        with:
          build-type: system
          build-name: ${{ matrix.host }}
          flake-target: .#top.${{ matrix.host }}
          error-log: ${{ steps.build.outputs.error-log }}
          build-duration: ${{ steps.build.outputs.build_duration }}
          runner: ${{ matrix.runner }}
          pr-number: ${{ github.event.pull_request.number }}

      - name: Failure Summary
        if: failure()
        uses: ./.github/actions/workflow-summary
        with:
          type: build-failure
          host: ${{ matrix.host }}
          runner: ${{ matrix.runner }}
          build-duration: ${{ steps.build.outputs.build_duration }}
          flake-target: .#top.${{ matrix.host }}
          fork-pr: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}
