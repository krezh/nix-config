---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build Nix
on:
  pull_request:
  workflow_dispatch:
  workflow_call:
  push:
    branches: ["main"]
permissions:
  id-token: write
  contents: read
  actions: read
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true
env:
  CACHE_NAME: krezh
  NIX_CONFIG: |
    accept-flake-config = true
    always-allow-substitutes = true
    builders-use-substitutes = true
  FORMAT_DURATION: |
    format_duration() {
      local duration_seconds=$1
      if [ $duration_seconds -ge 3600 ]; then
        hours=$((duration_seconds / 3600))
        minutes=$(((duration_seconds % 3600) / 60))
        seconds=$((duration_seconds % 60))
        echo "${hours}h${minutes}m${seconds}s"
      elif [ $duration_seconds -ge 60 ]; then
        minutes=$((duration_seconds / 60))
        seconds=$((duration_seconds % 60))
        echo "${minutes}m${seconds}s"
      else
        echo "${duration_seconds}s"
      fi
    }
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      build-type: ${{ steps.detect.outputs.build-type }}
      changed-packages: ${{ steps.detect.outputs.changed-packages }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Get changed files
        id: changed-files
        uses: bjw-s-labs/action-changed-files@v0.3.3

      - name: Detect what changed
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "build-type=full" >> $GITHUB_OUTPUT
            echo "Manual trigger - building everything"
            exit 0
          fi

          ALL_CHANGED='${{ steps.changed-files.outputs.all_changed_files }}'

          if [ -z "$ALL_CHANGED" ] || [ "$ALL_CHANGED" = "[]" ]; then
            echo "build-type=full" >> $GITHUB_OUTPUT
            echo "No changed files detected - building everything"
            exit 0
          fi

          PKG_CHANGES=$(echo "$ALL_CHANGED" | jq -r '.[] | select(startswith("pkgs/"))')
          SYSTEM_CHANGES=$(echo "$ALL_CHANGED" | jq -r '.[] | select(test("^(modules|hosts|flake\\.nix|flake\\.lock)"))')

          if [ -n "$SYSTEM_CHANGES" ]; then
            echo "build-type=full" >> $GITHUB_OUTPUT
            echo "System/module changes detected - building all hosts"
          elif [ -n "$PKG_CHANGES" ]; then
            echo "build-type=packages" >> $GITHUB_OUTPUT
            PACKAGES=$(echo "$PKG_CHANGES" | grep -oP 'pkgs/(bin|scripts)/\K[^/]+' | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "changed-packages=$PACKAGES" >> $GITHUB_OUTPUT
            echo "Package changes detected: $PACKAGES"
          else
            echo "build-type=skip" >> $GITHUB_OUTPUT
            echo "No relevant changes - skipping builds"
          fi

  ghMatrix:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.build-type == 'full'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
        with:
          nix_conf: ${{ env.NIX_CONFIG }}

      - name: Setup Nix Cache
        uses: nix-community/cache-nix-action@135667ec418502fa5a3598af6fb9eb733888ce6a # v6.1.3
        id: cache
        with:
          primary-key: nix-flake-inputs-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-flake-inputs-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-flake-inputs-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never

      - run: nix build .#gc-keep
        if: steps.cache.outputs.hit-primary-key != 'true'

      - id: set-matrix
        name: Generate Matrix
        run: |
          set -Eeu
          matrix=$(nix eval --json '.#ghMatrix')
          if [ "$(echo "$matrix" | jq '.include | length')" -eq 0 ]; then
            echo "Error: No hosts to build"
            exit 1
          fi
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

      - name: Show Summary
        run: |
          matrix='${{ steps.set-matrix.outputs.matrix }}'
          {
            echo "## üîç Build Matrix Generated"
            echo ""
            echo "**Event:** ${{ github.event_name }}"
            echo "**Branch/Ref:** ${{ github.ref }}"
            echo "**Commit:** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
            echo ""
            echo "**Total hosts to build:** $(echo "$matrix" | jq '.include | length')"
            echo ""
            echo "### üèóÔ∏è Hosts to Build:"
            echo "$matrix" | jq -r '.include[] | "- **`" + .host + "`** (runner: `" + .runner + "`)"'
            echo ""
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "**PR:** [#${{ github.event.number }}](${{ github.event.pull_request.html_url }}) - ${{ github.event.pull_request.title }}"
              echo "**Author:** @${{ github.event.pull_request.user.login }}"
              echo ""
            fi
            echo "### ‚öôÔ∏è Configuration"
            echo "- **Cache:** ${{ env.CACHE_NAME }}"
            cache_hit="${{ steps.cache.outputs.hit-primary-key }}"
            if [ "$cache_hit" = "true" ]; then
              echo "- **Cache Hit:** ‚úÖ Yes"
            else
              echo "- **Cache Hit:** ‚ùå No (rebuilding inputs)"
            fi
            echo "- **Flake Lock Hash:** \`${{ hashFiles('**/*.nix', '**/flake.lock') }}\`"
            echo ""
            echo "<details>"
            echo "<summary>View raw matrix JSON</summary>"
            echo ""
            echo '```json'
            echo '${{ toJson(steps.set-matrix.outputs.matrix) }}'
            echo '```'
            echo "</details>"
          } >> "${GITHUB_STEP_SUMMARY}"

  build-packages:
    name: Build package ${{ matrix.package }}
    needs: detect-changes
    if: needs.detect-changes.outputs.build-type == 'packages'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Nix with caching
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-cache: ${{ secrets.ATTIC_CACHE }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
          skip-cache: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}

      - name: Build package
        run: |
          nix build ".#${{ matrix.package }}" --print-build-logs

      - name: Success Summary
        if: success()
        run: |
          {
            echo "## ‚úÖ Package Build Successful: \`${{ matrix.package }}\`"
            echo ""
            echo "**Flake Target:** \`.#${{ matrix.package }}\`"
          } >> "${GITHUB_STEP_SUMMARY}"

      - name: Failure Summary
        if: failure()
        run: |
          {
            echo "## ‚ùå Package Build Failed: \`${{ matrix.package }}\`"
            echo ""
            echo "**Flake Target:** \`.#${{ matrix.package }}\`"
          } >> "${GITHUB_STEP_SUMMARY}"

  nix-build:
    name: Build ${{ matrix.host }}
    if: github.event.pull_request.draft == false
    needs: [detect-changes, ghMatrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.ghMatrix.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Environment
        uses: wimpysworld/nothing-but-nix@6af122a9403f936ef689e44cc013ae3f3e2f1c3b # v6
        with:
          hatchet-protocol: cleave
          nix-permission-edict: true

      - name: Restore Nix Cache
        uses: nix-community/cache-nix-action/restore@135667ec418502fa5a3598af6fb9eb733888ce6a # v6.1.3
        with:
          primary-key: nix-flake-inputs-${{ hashFiles('**/*.nix', '**/flake.lock') }}

      - name: Setup Nix with caching
        uses: ./.github/actions/setup-nix
        with:
          cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}
          attic-endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          attic-cache: ${{ secrets.ATTIC_CACHE }}
          attic-token: ${{ secrets.ATTIC_TOKEN }}
          skip-cache: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}

      - name: Find previous run ID
        id: find-run
        run: |
          run_id=$(gh run list --workflow build-nix.yaml --branch main --status success --limit 1 --json databaseId -q '.[0].databaseId')
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Download previous package list artifact (if any)
      - name: Download previous package list artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        id: download-artifact
        continue-on-error: true
        with:
          name: pkg-list-${{ matrix.host }}
          path: previous-artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.find-run.outputs.run_id }}
          merge-multiple: false

      - name: Build System
        id: build
        run: |
          set -o pipefail
          build_start=$(date +%s)
          echo "build_start=$build_start" >> $GITHUB_OUTPUT

          nix build \
            ".#top.${{ matrix.host }}" \
            -o result \
            --fallback \
            --no-write-lock-file \
            --log-format raw

          build_end=$(date +%s)
          build_duration=$((build_end - build_start))
          echo "build_duration=$build_duration" >> $GITHUB_OUTPUT

      - name: Generate new package list
        run: python3 .github/scripts/pkg-tool.py list result pkg-list.json

      - name: Upload new package list artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: pkg-list-${{ matrix.host }}
          path: pkg-list.json
          if-no-files-found: error
          retention-days: 30
          compression-level: 6
          overwrite: true
          include-hidden-files: false

      - name: Success Summary
        if: success()
        run: |
          eval "$FORMAT_DURATION"
          build_size="Unknown"
          if [ -L "result" ]; then
            store_path=$(readlink "result" 2>/dev/null || echo "")
            if [ -n "$store_path" ]; then
              size_output="$(nix path-info --closure-size --human-readable "$store_path" 2>/dev/null || echo "")"
              if [ -n "$size_output" ]; then
                build_size="$(echo "$size_output" | awk '{ if (NF == 2) { print $2 } else if (NF >= 3) { print $(NF-1) $NF } }')"
              fi
            fi
          fi
          prev_json="${{ steps.download-artifact.outputs.download-path }}/pkg-list.json"
          {
            echo "## ‚úÖ Build Successful: \`${{ matrix.host }}\`"
            echo ""
            echo "| Property | Value |"
            echo "|----------|--------|"
            echo "| **Runner** | \`${{ matrix.runner }}\` |"
            echo "| **Build Size** | \`${build_size}\` |"
            echo "| **Result Path** | \`$(readlink result 2>/dev/null || echo "Unknown")\` |"
            echo ""
            echo "### üéØ Build Details"
            echo "- **Event:** ${{ github.event_name }}"
            echo "- **Ref:** ${{ github.ref }}"
            echo "- **Flake Target:** \`.#top.${{ matrix.host }}\`"
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "- **PR:** [#${{ github.event.number }}](${{ github.event.pull_request.html_url }}) - ${{ github.event.pull_request.title }}"
              echo "- **Author:** @${{ github.event.pull_request.user.login }}"
              if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
                echo "- **Draft:** Yes"
              else
                echo "- **Draft:** No"
              fi
            fi
            echo ""
            echo "**Build Duration:** $(format_duration ${{ steps.build.outputs.build_duration }})"
            echo ""
            echo "### üì¶ Package Diff"
            if [ -f "$prev_json" ]; then
              python3 .github/scripts/pkg-tool.py diff "$prev_json" pkg-list.json --github
            else
              echo "_No previous package list found; skipping diff._"
            fi
          } >> "${GITHUB_STEP_SUMMARY}"

      - name: Failure Summary
        if: failure()
        run: |
          eval "$FORMAT_DURATION"
          {
            echo "## ‚ùå Build Failed: \`${{ matrix.host }}\`"
            echo ""
            echo "| Property | Value |"
            echo "|----------|--------|"
            echo "| **Runner** | \`${{ matrix.runner }}\` |"
            echo ""
            echo "### üîç Failure Details"
            echo "- **Event:** ${{ github.event_name }}"
            echo "- **Ref:** ${{ github.ref }}"
            echo "- **Flake Target:** \`.#top.${{ matrix.host }}\`"
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "- **PR:** [#${{ github.event.number }}](${{ github.event.pull_request.html_url }}) - ${{ github.event.pull_request.title }}"
              echo "- **Author:** @${{ github.event.pull_request.user.login }}"
            fi
            echo ""
            echo "### üõ†Ô∏è Debugging Information"
            if [ "${{ github.event_name }}" != "pull_request" ] || [ "${{ github.event.pull_request.head.repo.fork }}" != "true" ]; then
              echo "- **Cache Available:** ‚úÖ Yes"
            else
              echo "- **Cache Available:** ‚ùå No (fork/external PR)"
            fi
            echo "- **Build Command:** \`nix build .#top.${{ matrix.host }} -o result --fallback --no-write-lock-file\`"
            echo "- **Job Status:** Failed"
            if [ -n "${{ steps.build.outputs.build_duration }}" ]; then
              echo "- **Time to Failure:** $(format_duration ${{ steps.build.outputs.build_duration }})"
            fi
            echo ""
            echo "### üí° Next Steps"
            echo "1. Check the build logs above for specific error messages"
            echo "2. Verify the flake configuration for \`${{ matrix.host }}\`"
            echo "3. Test locally with: \`nix build .#top.${{ matrix.host }}\`"
            echo "4. Check if recent changes broke the build"
          } >> "${GITHUB_STEP_SUMMARY}"
