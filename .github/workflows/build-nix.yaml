---
name: Build Nix systems
on:
  pull_request:
    paths-ignore: ["pkgs/**", ".github/**"]
  workflow_dispatch:
  workflow_call:
  push:
    branches: ["main"]
    paths:
      - "**.nix"
      - "flake.lock"
      - "modules/**"
      - "hosts/**"
permissions:
  id-token: "write"
  contents: "read"
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  NIX_CONFIG: |
    accept-flake-config = true
    always-allow-substitutes = true
    builders-use-substitutes = true

jobs:
  build-systems:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 1 }}

      - name: Nothing but Nix
        uses: wimpysworld/nothing-but-nix@6af122a9403f936ef689e44cc013ae3f3e2f1c3b # v6
        with:
          hatchet-protocol: "cleave"
          witness-carnage: false
          nix-permission-edict: true

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
        with:
          nix_conf: ${{ env.NIX_CONFIG }}

      - uses: nix-community/cache-nix-action@135667ec418502fa5a3598af6fb9eb733888ce6a # v6.1.3
        with:
          primary-key: nix-${{ hashFiles('flake.lock') }}
          restore-prefixes-first-match: nix-
          gc-max-store-size-linux: 1073741824
          purge: true
          purge-prefixes: nix-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never

      - name: Setup Cachix
        uses: cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad # v16
        if: ${{ (github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork) }}
        with:
          name: krezh
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Setup Attic
        uses: ryanccn/attic-action@7fbafba3978e86e585cb68a82c08b30f3672b62d # v0.4.0
        if: ${{ (github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork) }}
        with:
          endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          cache: ${{ secrets.ATTIC_CACHE }}
          token: ${{ secrets.ATTIC_TOKEN }}

      - name: Install nix-fast-build
        run: nix profile install github:Mic92/nix-fast-build

      - name: Build systems
        id: build
        run: |
          if nix-fast-build \
            --flake ".#checks" \
            --no-nom \
            --skip-cached \
            --result-file build-results.json \
            --result-format json; then
            echo "build_success=true" >> $GITHUB_OUTPUT
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate build summary
        if: always()
        run: |
          echo "# 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.build.outputs.build_success }}" == "true" ]]; then
            echo "## ✅ All builds succeeded!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Some builds failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Count results from JSON
          if [[ -f "build-results.json" ]]; then
            total_builds=$(jq '[.results[] | select(.type == "BUILD")] | length' build-results.json)
            successful_builds=$(jq '[.results[] | select(.type == "BUILD" and .success == true)] | length' build-results.json)
            failed_builds=$(jq '[.results[] | select(.type == "BUILD" and .success == false)] | length' build-results.json)
            cached_items=$(jq '[.results[] | select(.type == "CACHED")] | length' build-results.json || echo "0")

            echo "### 📊 Build Statistics" >> $GITHUB_STEP_SUMMARY
            echo "- **Total builds:** $total_builds" >> $GITHUB_STEP_SUMMARY
            echo "- **Successful:** $successful_builds" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed:** $failed_builds" >> $GITHUB_STEP_SUMMARY
            echo "- **Cached:** $cached_items" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # List what was built
            echo "### 📦 Items Built" >> $GITHUB_STEP_SUMMARY
            jq -r '.results[] | select(.type == "BUILD") | "- " + .attr + (if .success then " ✅" else " ❌" end)' build-results.json >> $GITHUB_STEP_SUMMARY

            # Show cached items if any
            if [[ "$cached_items" -gt 0 ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🗄️ Items from Cache" >> $GITHUB_STEP_SUMMARY
              jq -r '.results[] | select(.type == "CACHED") | "- " + .attr + " 💾"' build-results.json >> $GITHUB_STEP_SUMMARY || true
            fi
          fi

      - name: Fail if builds failed
        if: steps.build.outputs.build_success != 'true'
        run: exit 1
