---
name: Build Nix ISO

on:
  pull_request:
    branches:
      - "!main"
      - "test-**"
  push:
    branches:
      - "!main"
      - "test-**"
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  INCLUDED_HOSTS: '["nixos-livecd"]'

jobs:
  nix-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Nix
        uses: cachix/install-nix-action@91a071959513ca103b54280ac0bef5b825791d4d # v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            accept-flake-config = true

      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -Eeu
          matrix="$(nix eval --json '.#evalHosts' | jq -cM --argjson include_hosts '${{ env.INCLUDED_HOSTS }}' '.include |= map(select(.host as $host | $include_hosts | index($host)))')"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

      - name: show output
        run: |
          echo "${{ toJson(steps.set-matrix.outputs.matrix) }}" >> "${GITHUB_STEP_SUMMARY}"

  nix-build:
    if: github.event.pull_request.draft == false
    needs: nix-matrix
    permissions:
      pull-requests: write
      packages: write
      contents: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.nix-matrix.outputs.matrix) }}

    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@91a071959513ca103b54280ac0bef5b825791d4d # v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            accept-flake-config = true

      - name: Garbage collect build dependencies
        run: nix-collect-garbage

      - name: Build new ${{ matrix.host }} system
        id: build
        run: |
          set -o pipefail
          nix build \
            ".#nixosConfigurations.${{ matrix.host }}.config.system.build.isoImage" \
            --fallback \
            --log-format raw \
             > >(tee stdout.log) 2> >(tee /tmp/nix-build-err.log >&2)

      - name: Create tag
        id: tag
        run: echo tag="$(date -u +"%Y-%m-%d")-$(openssl rand -hex 5)" >> "${GITHUB_OUTPUT}"

      - name: Rename ISO
        run: |
          cp ./result/iso/*.iso /tmp/nixos-${{ matrix.host }}-${{ steps.tag.outputs.tag }}.iso

      - name: Release
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "NixOS ISO: ${{ matrix.host }}-${{ steps.tag.outputs.tag }}"
          files: /tmp/nixos-${{ matrix.host }}-${{ steps.tag.outputs.tag }}.iso
          generate_release_notes: true
          make_latest: true
          tag_name: ${{ matrix.host }}-${{ steps.tag.outputs.tag }}

      - name: Output build failure
        if: failure()
        run: |
          drv=$(grep "For full logs, run" /tmp/nix-build-err.log | grep -oE "/nix/store/.*.drv")
          if [ -n "$drv" ]; then
            nix log "$drv"
            echo "$drv"
          fi
          exit 1

  nix-build-success:
    if: ${{ always() }}
    needs:
      - nix-build
    name: Nix Build Successful
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        name: Check matrix status
        run: exit 1
