---
name: Build Nix ISO

on:
  pull_request:
    branches:
      - "!main"
      - "test-**"
  push:
    branches:
      - "!main"
      - "test-**"
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  HOST: nixos-livecd
  NIX_CONFIG: |
    accept-flake-config = true
    always-allow-substitutes = true
    builders-use-substitutes = true

jobs:
  build-iso:
    name: Build NixOS Live CD ISO
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
        with:
          nix_conf: ${{ env.NIX_CONFIG }}

      - name: Garbage collect build dependencies
        run: nix-collect-garbage

      - name: Build ISO
        id: build
        run: |
          set -o pipefail
          build_start=$(date +%s)

          nix build \
            ".#nixosConfigurations.${{ env.HOST }}.config.system.build.isoImage" \
            --fallback \
            --log-format raw \
            --print-build-logs 2>&1 | tee build.log || {
            {
              echo 'error-log<<EOF_ERROR_LOG'
              grep -iE 'error|failed|cannot|fatal|panic' build.log | tail -n 100 || tail -n 50 build.log
              echo 'EOF_ERROR_LOG'
            } >> $GITHUB_OUTPUT
            exit 1
          }

          build_end=$(date +%s)
          build_duration=$((build_end - build_start))
          echo "build_duration=$build_duration" >> $GITHUB_OUTPUT

      - name: Create tag
        if: success()
        id: tag
        run: echo tag="$(date -u +"%Y-%m-%d")-$(openssl rand -hex 5)" >> "${GITHUB_OUTPUT}"

      - name: Get ISO info
        if: success()
        id: iso-info
        run: |
          iso_path=$(ls ./result/iso/*.iso)
          iso_size=$(du -h "$iso_path" | cut -f1)
          echo "path=$iso_path" >> $GITHUB_OUTPUT
          echo "size=$iso_size" >> $GITHUB_OUTPUT
          echo "name=nixos-${{ env.HOST }}-${{ steps.tag.outputs.tag }}.iso" >> $GITHUB_OUTPUT

      - name: Copy ISO
        if: success()
        run: |
          cp "${{ steps.iso-info.outputs.path }}" "/tmp/${{ steps.iso-info.outputs.name }}"

      - name: Release ISO
        if: success()
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "NixOS ISO: ${{ env.HOST }}-${{ steps.tag.outputs.tag }}"
          files: /tmp/${{ steps.iso-info.outputs.name }}
          generate_release_notes: true
          make_latest: true
          tag_name: ${{ env.HOST }}-${{ steps.tag.outputs.tag }}

      - name: Success Summary
        if: success()
        uses: ./.github/actions/workflow-summary
        with:
          type: iso-success
          host: ${{ env.HOST }}
          runner: ubuntu-latest
          iso-size: ${{ steps.iso-info.outputs.size }}
          build-duration: ${{ steps.build.outputs.build_duration }}
          iso-tag: ${{ steps.tag.outputs.tag }}
          iso-name: ${{ steps.iso-info.outputs.name }}
          flake-target: .#nixosConfigurations.${{ env.HOST }}.config.system.build.isoImage

      - name: Failure Summary
        if: failure()
        uses: ./.github/actions/workflow-summary
        with:
          type: iso-failure
          host: ${{ env.HOST }}
          runner: ubuntu-latest
          build-duration: ${{ steps.build.outputs.build_duration }}
          flake-target: .#nixosConfigurations.${{ env.HOST }}.config.system.build.isoImage
