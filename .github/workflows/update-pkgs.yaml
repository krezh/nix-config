---
name: Update Packages

on:
  schedule:
    # Run every hour
    - cron: "0 * * * *"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  NIX_CONFIG: |
    accept-flake-config = true
    always-allow-substitutes = true
    builders-use-substitutes = true

jobs:
  # Job to generate the matrix of packages to update
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-packages: ${{ steps.set-matrix.outputs.has-packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
        with:
          nix_conf: ${{ env.NIX_CONFIG }}

      - name: Generate package matrix
        id: set-matrix
        run: |
          chmod +x .github/scripts/list-remote-packages.sh
          PACKAGES=$(.github/scripts/list-remote-packages.sh)
          echo "matrix=$PACKAGES" >> $GITHUB_OUTPUT
          if [ "$PACKAGES" = "[]" ] || [ -z "$PACKAGES" ]; then
            echo "has-packages=false" >> $GITHUB_OUTPUT
          else
            echo "has-packages=true" >> $GITHUB_OUTPUT
          fi
          echo "Found packages: $PACKAGES"

  # Job to update each package in parallel
  update-package:
    needs: generate-matrix
    if: needs.generate-matrix.outputs.has-packages == 'true'
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"
          owner: "${{ github.repository_owner }}"

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: "${{ steps.app-token.outputs.token }}"
          fetch-depth: 0

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@2c9db80fb984ceb1bcaa77cdda3fdf8cfba92035 # v34
        with:
          nix_conf: ${{ env.NIX_CONFIG }}

      - name: Set up Cachix
        uses: cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad # v16
        with:
          name: krezh
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Get current version
        id: current-version
        continue-on-error: true
        run: |
          VERSION=$(nix eval ".#${{ matrix.package }}.version" --raw 2>/dev/null || echo "unknown")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Get package source info
        id: package-info
        continue-on-error: true
        run: |
          # Try to extract repo info from the package
          PKG_FILE="pkgs/bin/${{ matrix.package }}/default.nix"
          if [ ! -f "$PKG_FILE" ]; then
            PKG_FILE="pkgs/scripts/${{ matrix.package }}/default.nix"
          fi

          if [ -f "$PKG_FILE" ]; then
            # Extract owner and repo from fetchFromGitHub
            OWNER=$(grep -oP 'owner\s*=\s*"\K[^"]+' "$PKG_FILE" || echo "unknown")
            REPO=$(grep -oP 'repo\s*=\s*"\K[^"]+' "$PKG_FILE" || echo "${{ matrix.package }}")
            echo "owner=$OWNER" >> $GITHUB_OUTPUT
            echo "repo=$REPO" >> $GITHUB_OUTPUT
            echo "Source: $OWNER/$REPO"
          else
            echo "owner=unknown" >> $GITHUB_OUTPUT
            echo "repo=${{ matrix.package }}" >> $GITHUB_OUTPUT
          fi

      - name: Configure git for bot
        run: |
          git config --global user.name "${{ secrets.BOT_USERNAME }}"
          git config --global user.email "${{ secrets.BOT_USER_EMAIL }}"

      - name: Update package with nix-update
        id: update
        continue-on-error: true
        run: |
          VERSION_REGEX='^v?([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$'

          nix run github:Mic92/nix-update -- "${{ matrix.package }}" \
            --flake \
            --commit \
            --version-regex "$VERSION_REGEX" 2>&1 | tee update.log

          if git diff --quiet HEAD~1 2>/dev/null && [ "$(git rev-list --count HEAD^..HEAD 2>/dev/null || echo 0)" -eq 0 ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected for ${{ matrix.package }}"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected for ${{ matrix.package }}"
          fi

      - name: Get new version
        id: new-version
        if: steps.update.outputs.has-changes == 'true'
        continue-on-error: true
        run: |
          VERSION=$(nix eval ".#${{ matrix.package }}.version" --raw 2>/dev/null || echo "unknown")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"

      - name: Build package
        if: steps.update.outputs.has-changes == 'true'
        continue-on-error: true
        run: |
          nix build ".#${{ matrix.package }}" --print-build-logs

      - name: Extract reviewers from CODEOWNERS
        if: steps.update.outputs.has-changes == 'true'
        id: codeowners
        run: |
          REVIEWERS=$(grep -E '^\*\s+@' .github/CODEOWNERS | sed 's/^\*\s\+//' | sed 's/@//g' | tr '\n' ',' | sed 's/,$//')
          echo "reviewers=$REVIEWERS" >> $GITHUB_OUTPUT
          echo "Found reviewers: $REVIEWERS"

      - name: Generate changelog
        if: steps.update.outputs.has-changes == 'true'
        id: changelog
        continue-on-error: true
        run: |
          chmod +x .github/scripts/get-changelog.sh

          # Generate changelog and save to file
          .github/scripts/get-changelog.sh \
            "${{ steps.package-info.outputs.owner }}" \
            "${{ steps.package-info.outputs.repo }}" \
            "${{ steps.current-version.outputs.version }}" \
            "${{ steps.new-version.outputs.version }}" \
            "${{ steps.app-token.outputs.token }}" > changelog.md

          # Output for use in PR body
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.update.outputs.has-changes == 'true'
        uses: peter-evans/create-pull-request@5e914681df9dc83aa4e4905692ca88beb2f9e91f # v7
        with:
          token: "${{ steps.app-token.outputs.token }}"
          commit-message: "Update ${{ matrix.package }} (${{ steps.current-version.outputs.version }} → ${{ steps.new-version.outputs.version }})"
          committer: "${{ secrets.BOT_USERNAME }} <${{ secrets.BOT_USER_EMAIL }}>"
          author: "${{ secrets.BOT_USERNAME }} <${{ secrets.BOT_USER_EMAIL }}>"
          branch: "pkgs/${{ steps.package-info.outputs.repo }}-${{ matrix.package }}"
          delete-branch: true
          title: "Update package ${{ steps.package-info.outputs.owner }}/${{ steps.package-info.outputs.repo }} (${{ steps.current-version.outputs.version }} → ${{ steps.new-version.outputs.version }})"
          body: |
            ## 📦 Package Update

            | | |
            |---|---|
            | **Package** | `${{ matrix.package }}` |
            | **Source** | [`${{ steps.package-info.outputs.owner }}/${{ steps.package-info.outputs.repo }}`](https://github.com/${{ steps.package-info.outputs.owner }}/${{ steps.package-info.outputs.repo }}) |
            | **Version** | `${{ steps.current-version.outputs.version }}` → `${{ steps.new-version.outputs.version }}` |

            ### ✅ Verification

            - [x] Package builds successfully
            - [x] Hashes updated automatically
            - [ ] Ready for review

            ---

            <details>
            <summary>📝 Release Notes & Changelog</summary>

            ${{ steps.changelog.outputs.changelog }}

            </details>

            ---

            <sub>🤖 This PR was automatically generated by [update-pkgs.yaml](.github/workflows/update-pkgs.yaml)</sub>
          labels: |
            dependencies
            automated
          reviewers: ${{ steps.codeowners.outputs.reviewers }}
